Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7a0ca2cc-3ae5-43a4-b868-7adf95c692ec\" name=\"Changes\" comment=\"fixes exit button availability\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MarchMadness/target/classes/k/marchmadness/MarchMadnessGUI.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MarchMadness/target/classes/k/marchmadness/MarchMadnessGUI.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"94973c9a8ecb4652def13defd7b9de4ff0a0be1e\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26z0v8R16dB6olm2Zicmn9J39hL\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"jdk.selected.JAVA_MODULE\" value=\"openjdk-17\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/MarchMadness/pom.xml\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.maven.repository.indices\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\wante\\OneDrive - massbay.edu\\Spring '22 semester\\CS225 Software Design\\Projects\\MarchMadness\\src\\main\\java\\k\\marchmadness\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\wante\\OneDrive - massbay.edu\\Spring '22 semester\\CS225 Software Design\\Projects\\MarchMadness\\src\\main\\resources\\k\\marchmadness\" />\r\n      <recent name=\"C:\\Users\\wante\\OneDrive - massbay.edu\\Spring '22 semester\\CS225 Software Design\\Projects\\MarchMadness\\src\\main\\java\\k\\marchmadness\" />\r\n      <recent name=\"C:\\Users\\wante\\OneDrive - massbay.edu\\Spring '22 semester\\CS225 Software Design\\Projects\\MarchMadness\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"MarchMadnessGUI\" type=\"Application\" factoryName=\"Application\" activateToolWindowBeforeRun=\"false\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"openjdk-17\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"k.marchmadness.MarchMadnessGUI\" />\r\n      <module name=\"MarchMadness\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MarchMadness\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MarchMadnessGUI\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"7a0ca2cc-3ae5-43a4-b868-7adf95c692ec\" name=\"Changes\" comment=\"\" />\r\n      <created>1648411336085</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1648411336085</updated>\r\n      <workItem from=\"1648411337313\" duration=\"1152000\" />\r\n      <workItem from=\"1648419971219\" duration=\"4876000\" />\r\n      <workItem from=\"1648596720441\" duration=\"1158000\" />\r\n      <workItem from=\"1648646702008\" duration=\"4858000\" />\r\n      <workItem from=\"1648828204699\" duration=\"4737000\" />\r\n      <workItem from=\"1648909782786\" duration=\"4803000\" />\r\n      <workItem from=\"1648996203400\" duration=\"6093000\" />\r\n      <workItem from=\"1649175437392\" duration=\"11737000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"created git accidentally via intelliJ with recent changes\">\r\n      <created>1648935138576</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648935138576</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added logout button logic and associated method\">\r\n      <created>1649107781235</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649107781235</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"implementing logout, exit game, and new bracket(in progress)\">\r\n      <created>1649184291418</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649184291418</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"fixes exit button availability\">\r\n      <created>1649184916085</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649184916085</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"created git accidentally via intelliJ with recent changes\" />\r\n    <MESSAGE value=\"Added logout button logic and associated method\" />\r\n    <MESSAGE value=\"implementing logout, exit game, and new bracket(in progress)\" />\r\n    <MESSAGE value=\"fixes exit button availability\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixes exit button availability\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5000917c3ac3df563b2600215809840bfea8b991)
+++ b/.idea/workspace.xml	(date 1649189741446)
@@ -6,7 +6,8 @@
   <component name="ChangeListManager">
     <list default="true" id="7a0ca2cc-3ae5-43a4-b868-7adf95c692ec" name="Changes" comment="fixes exit button availability">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MarchMadness/target/classes/k/marchmadness/MarchMadnessGUI.class" beforeDir="false" afterPath="$PROJECT_DIR$/MarchMadness/target/classes/k/marchmadness/MarchMadnessGUI.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MarchMadness/src/main/java/k/marchmadness/BracketPane.java" beforeDir="false" afterPath="$PROJECT_DIR$/MarchMadness/src/main/java/k/marchmadness/BracketPane.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java" beforeDir="false" afterPath="$PROJECT_DIR$/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -16,7 +17,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="94973c9a8ecb4652def13defd7b9de4ff0a0be1e" />
+        <entry key="$PROJECT_DIR$" value="kevin-branch" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -43,7 +44,8 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="jdk.selected.JAVA_MODULE" value="openjdk-17" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/MarchMadness/pom.xml" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/MarchMadness/src/main/java/k/marchmadness" />
+    <property name="nodejs_package_manager_path" value="npm" />
     <property name="project.structure.last.edited" value="Modules" />
     <property name="project.structure.proportion" value="0.0" />
     <property name="project.structure.side.proportion" value="0.2" />
@@ -51,6 +53,7 @@
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\wante\OneDrive - massbay.edu\Spring '22 semester\CS225 Software Design\Projects\MarchMadness\MarchMadness\src\main\java\k\marchmadness" />
       <recent name="C:\Users\wante\OneDrive - massbay.edu\Spring '22 semester\CS225 Software Design\Projects\MarchMadness\src\main\java\k\marchmadness" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
@@ -91,7 +94,7 @@
       <workItem from="1648828204699" duration="4737000" />
       <workItem from="1648909782786" duration="4803000" />
       <workItem from="1648996203400" duration="6093000" />
-      <workItem from="1649175437392" duration="11737000" />
+      <workItem from="1649175437392" duration="12864000" />
     </task>
     <task id="LOCAL-00001" summary="created git accidentally via intelliJ with recent changes">
       <created>1648935138576</created>
@@ -121,7 +124,14 @@
       <option name="project" value="LOCAL" />
       <updated>1649184916085</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="fixes exit button availability">
+      <created>1649188612339</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1649188612339</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: MarchMadness/src/main/java/k/marchmadness/BracketPane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javafx.event.EventHandler;\r\nimport javafx.geometry.NodeOrientation;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.effect.InnerShadow;\r\nimport javafx.scene.input.MouseButton;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Line;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.scene.text.TextAlignment;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\nimport javafx.scene.layout.Region;\r\n\r\n/**\r\n * Created by Richard and Ricardo on 5/3/17.\r\n */\r\npublic class BracketPane extends BorderPane {\r\n\r\n        /**\r\n         * Reference to the graphical representation of the nodes within the bracket.\r\n         */\r\n        private static ArrayList<BracketNode> nodes;\r\n        /**\r\n         * Used to initiate the paint of the bracket nodes\r\n         */\r\n        private static boolean isTop = true;\r\n        /**\r\n         * Maps the text \"buttons\" to it's respective grid-pane\r\n         */\r\n        private HashMap<StackPane, Pane> panes;\r\n        /**\r\n         * Reference to the current bracket.\r\n         */\r\n        private Bracket currentBracket;\r\n        /**\r\n         * Reference to active subtree within current bracket.\r\n         */\r\n        private int displayedSubtree;\r\n        /**\r\n         * Keeps track of whether or not bracket has been finalized.\r\n         */\r\n        private boolean finalized;\r\n        /**\r\n         * Important logical simplification for allowing for code that is easier\r\n         * to maintain.\r\n         */\r\n        private HashMap<BracketNode, Integer> bracketMap = new HashMap<>();\r\n        /**\r\n         * Reverse of the above;\r\n         */\r\n        private HashMap<Integer, BracketNode> nodeMap = new HashMap<>();\r\n\r\n        /**\r\n         * Clears the entries of a team future wins\r\n         *\r\n         * @param treeNum\r\n         */\r\n        private void clearAbove(int treeNum) {\r\n                int nextTreeNum = (treeNum - 1) / 2;\r\n                if (!nodeMap.get(nextTreeNum).getName().isEmpty()) {\r\n                        nodeMap.get(nextTreeNum).setName(\"\");\r\n                        clearAbove(nextTreeNum);\r\n                }\r\n        }\r\n        \r\n        \r\n        public void clear(){\r\n            clearSubtree(displayedSubtree);\r\n        }\r\n\r\n        /**\r\n         * Handles clicked events for BracketNode objects\r\n         */\r\n        private EventHandler<MouseEvent> clicked = mouseEvent -> {\r\n                //conditional added by matt 5/7 to differentiate between left and right mouse click\r\n                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {\r\n                        BracketNode n = (BracketNode) mouseEvent.getSource();\r\n                        int treeNum = bracketMap.get(n);\r\n                        int nextTreeNum = (treeNum - 1) / 2;\r\n                        if (!nodeMap.get(nextTreeNum).getName().equals(n.getName())) {\r\n                                currentBracket.removeAbove((nextTreeNum));\r\n                                clearAbove(treeNum);\r\n                                nodeMap.get((bracketMap.get(n) - 1) / 2).setName(n.getName());\r\n                                currentBracket.moveTeamUp(treeNum);\r\n                        }\r\n                }\r\n                //added by matt 5/7, shows the teams info if you right click\r\n                else if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {\r\n                        String text = \"\";\r\n                        BracketNode n = (BracketNode) mouseEvent.getSource();\r\n                        int treeNum = bracketMap.get(n);\r\n                        String teamName = currentBracket.getBracket().get(treeNum);\r\n                        try {\r\n                                TournamentInfo info = new TournamentInfo();\r\n                                Team t = info.getTeam(teamName);\r\n                                //by Tyler - added the last two pieces of info to the pop up window\r\n                                text += \"Team: \" + teamName + \" | Ranking: \" + t.getRanking() + \"\\nMascot: \" + t.getNickname() + \"\\nInfo: \" + t.getInfo() + \"\\nAverage Offensive PPG: \" + t.getOffensePPG() + \"\\nAverage Defensive PPG: \"+ t.getDefensePPG();\r\n                        } catch (IOException e) {//if for some reason TournamentInfo isnt working, it will display info not found\r\n                                text += \"Info for \" + teamName + \"not found\";\r\n                        }\r\n                        //create a popup with the team info\r\n                        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, text, ButtonType.CLOSE);\r\n                        alert.setTitle(\"March Madness Bracket Simulator\");\r\n                        alert.setHeaderText(null);\r\n                        alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);\r\n                        alert.showAndWait();\r\n                }\r\n        };\r\n        /**\r\n         * Handles mouseEntered events for BracketNode objects\r\n         */\r\n        private EventHandler<MouseEvent> enter = mouseEvent -> {\r\n                BracketNode tmp = (BracketNode) mouseEvent.getSource();\r\n                tmp.setStyle(\"-fx-background-color: lightcyan;\");\r\n                tmp.setEffect(new InnerShadow(10, Color.LIGHTCYAN));\r\n        };\r\n\r\n        /**\r\n         * Handles mouseExited events for BracketNode objects\r\n         */\r\n        private EventHandler<MouseEvent> exit = mouseEvent -> {\r\n                BracketNode tmp = (BracketNode) mouseEvent.getSource();\r\n                tmp.setStyle(null);\r\n                tmp.setEffect(null);\r\n\r\n        };\r\n\r\n        public GridPane getFullPane() {\r\n                return fullPane;\r\n        }\r\n\r\n        private GridPane center;\r\n        private GridPane fullPane;\r\n\r\n\r\n        /**\r\n         * TODO: Reduce. reuse, recycle!\r\n         * Initializes the properties needed to construct a bracket.\r\n         */\r\n        public BracketPane(Bracket currentBracket) {\r\n                displayedSubtree=0;\r\n                this.currentBracket = currentBracket;\r\n\r\n                bracketMap = new HashMap<>();\r\n                nodeMap = new HashMap<>();\r\n                panes = new HashMap<>();\r\n                nodes = new ArrayList<>();\r\n                ArrayList<Root> roots = new ArrayList<>();\r\n\r\n                center = new GridPane();\r\n\r\n                ArrayList<StackPane> buttons = new ArrayList<>();\r\n                buttons.add(customButton(\"EAST\"));\r\n                buttons.add(customButton(\"WEST\"));\r\n                buttons.add(customButton(\"MIDWEST\"));\r\n                buttons.add(customButton(\"SOUTH\"));\r\n                buttons.add(customButton(\"FULL\"));\r\n\r\n                ArrayList<GridPane> gridPanes = new ArrayList<>();\r\n\r\n                for (int m = 0; m < buttons.size() - 1; m++) {\r\n                        roots.add(new Root(3 + m));\r\n                        panes.put(buttons.get(m), roots.get(m));\r\n                }\r\n                Pane finalPane = createFinalFour();\r\n                //buttons.add(customButton(\"FINAL\"));\r\n                //panes.put(buttons.get(5), finalPane);\r\n                fullPane = new GridPane();\r\n                GridPane gp1 = new GridPane();\r\n                gp1.add(roots.get(0), 0, 0);\r\n                gp1.add(roots.get(1), 0, 1);\r\n                GridPane gp2 = new GridPane();\r\n                gp2.add(roots.get(2), 0, 0);\r\n                gp2.add(roots.get(3), 0, 1);\r\n                gp2.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\r\n\r\n                fullPane.add(gp1, 0, 0);\r\n                fullPane.add(finalPane, 1, 0, 1, 2);\r\n                fullPane.add(gp2, 2, 0);\r\n                fullPane.setAlignment(Pos.CENTER);\r\n                panes.put(buttons.get((buttons.size() - 1)), fullPane);\r\n                finalPane.toBack();\r\n\r\n                // Initializes the button grid\r\n                GridPane buttonGrid = new GridPane();\r\n                for (int i = 0; i < buttons.size(); i++)\r\n                        buttonGrid.add(buttons.get(i), 0, i);\r\n                buttonGrid.setAlignment(Pos.CENTER);\r\n\r\n                // set default center to the button grid\r\n                this.setCenter(buttonGrid);\r\n\r\n                for (StackPane t : buttons) {\r\n                        t.setOnMouseEntered(mouseEvent -> {\r\n                                t.setStyle(\"-fx-background-color: lightblue;\");\r\n                                t.setEffect(new InnerShadow(10, Color.LIGHTCYAN));\r\n                        });\r\n                        t.setOnMouseExited(mouseEvent -> {\r\n                                t.setStyle(\"-fx-background-color: orange;\");\r\n                                t.setEffect(null);\r\n                        });\r\n                        t.setOnMouseClicked(mouseEvent -> {\r\n                                setCenter(null);\r\n                                /**\r\n                                 * @update Grant & Tyler \r\n                                 * \t\t\tpanes are added as ScrollPanes to retain center alignment when moving through full-view and region-view\r\n                                 */\r\n                                center.add(new ScrollPane(panes.get(t)), 0, 0);\r\n                                center.setAlignment(Pos.CENTER);\r\n                                setCenter(center);\r\n                                //Grant 5/7 this is for clearing the tree it kind of works \r\n                                displayedSubtree=buttons.indexOf(t)==7?0:buttons.indexOf(t)+3;\r\n                        });\r\n                }\r\n\r\n        }\r\n\r\n        /**\r\n         * Helpful method to retrieve our magical numbers\r\n         *\r\n         * @param root the root node (3,4,5,6)\r\n         * @param pos  the position in the tree (8 (16) , 4 (8) , 2 (4) , 1 (2))\r\n         * @return The list representing the valid values.\r\n         */\r\n        public ArrayList<Integer> helper(int root, int pos) {\r\n                ArrayList<Integer> positions = new ArrayList<>();\r\n                int base = 0;\r\n                int tmp = (root * 2) + 1;\r\n                if (pos == 8) base = 3;\r\n                else if (pos == 4) base = 2;\r\n                else if (pos == 2) base = 1;\r\n                for (int i = 0; i < base; i++) tmp = (tmp * 2) + 1;\r\n                for (int j = 0; j < pos * 2; j++) positions.add(tmp + j);\r\n                return positions; //                while ((tmp = ((location * 2) + 1)) <= 127) ;\r\n        }\r\n\r\n        /**\r\n         * Sets the current bracket to,\r\n         *\r\n         * @param target The bracket to replace currentBracket\r\n         */\r\n        public void setBracket(Bracket target) {\r\n                currentBracket = target;\r\n        }\r\n\r\n        /**\r\n         * Clears the sub tree from,\r\n         *\r\n         * @param position The position to clear after\r\n         */\r\n        public void clearSubtree(int position) {\r\n                currentBracket.resetSubtree(position);\r\n        }\r\n\r\n        /**\r\n         * Resets the bracket-display\r\n         */\r\n        public void resetBracket() {\r\n                currentBracket.resetSubtree(0);\r\n        }\r\n\r\n        /**\r\n         * Requests a message from current bracket to tell if the bracket\r\n         * has been completed.\r\n         *\r\n         * @return True if completed, false otherwise.\r\n         */\r\n        public boolean isComplete() {\r\n                return currentBracket.isComplete();\r\n        }\r\n\r\n        /**\r\n         * @return true if the current-bracket is complete and the value\r\n         * of finalized is also true.\r\n         */\r\n        public boolean isFinalized() {\r\n                return currentBracket.isComplete() && finalized;\r\n        }\r\n\r\n        /**\r\n         * @param isFinalized The value to set finalized to.\r\n         */\r\n        public void setFinalized(boolean isFinalized) {\r\n                finalized = isFinalized && currentBracket.isComplete();\r\n        }\r\n\r\n        /**\r\n         * @author Alland Timas\r\n         * iterates through nodes and checks if teamname is empty. If empty, sets fill to a translucent red. Once previously empty node is filled, returns node to \r\n         * previous transparent state\r\n         */\r\n        public void checkEmptyNodes(){\r\n                for (BracketNode n : nodes) {\r\n                        if(n.teamName.isEmpty()){\r\n                             n.rect.setFill(Color.RED);  \r\n                             n.rect.setOpacity(0.2); \r\n                        }\r\n                        else{\r\n                            n.rect.setFill(Color.TRANSPARENT);    \r\n                        }\r\n                }\r\n        }\r\n        \r\n        //Alland Timas working on getting a comparison of user's bracket to simulated bracket\r\n        // public void compareBrackets(BracketPane b, BracketPane c){\r\n        //         for (int index = 0; index < c.bracketMap.size(); index++) {\r\n        //                 if(c.nodeMap.get(index).teamName == b.nodeMap.get(index).teamName){\r\n        //                         c.nodeMap.get(index).rect.setFill(Color.GREEN);\r\n        //                         c.nodeMap.get(index).rect.setOpacity(0.2);\r\n        //                 }\r\n        //                 else{\r\n        //                         c.nodeMap.get(index).rect.setFill(Color.RED);\r\n        //                         c.nodeMap.get(index).rect.setOpacity(0.2);  \r\n        //                 }\r\n        //         }\r\n        // }\r\n\r\n        /**\r\n         * Returns a custom \"Button\" with specified\r\n         *\r\n         * @param name The name of the button\r\n         * @return pane The stack-pane \"button\"\r\n         */\r\n        private StackPane customButton(String name) {\r\n                StackPane pane = new StackPane();\r\n                Rectangle r = new Rectangle(100, 50, Color.TRANSPARENT);\r\n                Text t = new Text(name);\r\n                t.setTextAlignment(TextAlignment.CENTER);\r\n                pane.getChildren().addAll(r, t);\r\n                pane.setStyle(\"-fx-background-color: orange;\");\r\n                return pane;\r\n        }\r\n\r\n        public Pane createFinalFour() {\r\n                Pane finalPane = new Pane();\r\n                BracketNode nodeFinal0 = new BracketNode(\"\", 162, 300, 70, 0);\r\n                BracketNode nodeFinal1 = new BracketNode(\"\", 75, 400, 70, 0);\r\n                BracketNode nodeFinal2 = new BracketNode(\"\", 250, 400, 70, 0);\r\n                nodeFinal0.setName(currentBracket.getBracket().get(0));\r\n                nodeFinal1.setName(currentBracket.getBracket().get(1));\r\n                nodeFinal2.setName(currentBracket.getBracket().get(2));\r\n                finalPane.getChildren().add(nodeFinal0);\r\n                finalPane.getChildren().add(nodeFinal1);\r\n                finalPane.getChildren().add(nodeFinal2);\r\n                bracketMap.put(nodeFinal1, 1);\r\n                bracketMap.put(nodeFinal2, 2);\r\n                bracketMap.put(nodeFinal0, 0);\r\n                nodeMap.put(1, nodeFinal1);\r\n                nodeMap.put(2, nodeFinal2);\r\n                nodeMap.put(0, nodeFinal0);\r\n\r\n                nodeFinal0.setOnMouseClicked(clicked);\r\n                nodeFinal0.setOnMouseDragEntered(enter);\r\n                nodeFinal0.setOnMouseDragExited(exit);\r\n\r\n                nodeFinal1.setOnMouseClicked(clicked);\r\n                nodeFinal1.setOnMouseDragEntered(enter);\r\n                nodeFinal1.setOnMouseDragExited(exit);\r\n\r\n                nodeFinal2.setOnMouseClicked(clicked);\r\n                nodeFinal2.setOnMouseDragEntered(enter);\r\n                nodeFinal2.setOnMouseDragExited(exit);\r\n                nodeFinal0.setStyle(\"-fx-border-color: darkblue\");\r\n                nodeFinal1.setStyle(\"-fx-border-color: darkblue\");\r\n                nodeFinal2.setStyle(\"-fx-border-color: darkblue\");\r\n                finalPane.setMinWidth(400.0);\r\n\r\n                return finalPane;\r\n        }\r\n\r\n        /**\r\n         * Creates the graphical representation of a subtree.\r\n         * Note, this is a vague model. TODO: MAKE MODULAR\r\n         */\r\n        private class Root extends Pane {\r\n\r\n                private int location;\r\n\r\n                public Root(int location) {\r\n                        this.location = location;\r\n                        createVertices(420, 200, 100, 20, 0, 0);\r\n                        createVertices(320, 119, 100, 200, 1, 0);\r\n                        createVertices(220, 60, 100, 100, 2, 200);\r\n                        createVertices(120, 35, 100, 50, 4, 100);\r\n                        createVertices(20, 25, 100, 25, 8, 50);\r\n                        for (BracketNode n : nodes) {\r\n                                n.setOnMouseClicked(clicked);\r\n                                n.setOnMouseEntered(enter);\r\n                                n.setOnMouseExited(exit);\r\n                        }\r\n                }\r\n\r\n                /**\r\n                 * The secret sauce... well not really,\r\n                 * Creates 3 lines in appropriate location unless it is the last line.\r\n                 * Adds these lines and \"BracketNodes\" to the Pane of this inner class\r\n                 */\r\n                private void createVertices(int iX, int iY, int iXO, int iYO, int num, int increment) {\r\n                        int y = iY;\r\n                        if (num == 0 && increment == 0) {\r\n                                BracketNode last = new BracketNode(\"\", iX, y - 20, iXO, 20);\r\n                                nodes.add(last);\r\n                                getChildren().addAll(new Line(iX, iY, iX + iXO, iY), last);\r\n                                last.setName(currentBracket.getBracket().get(location));\r\n                                bracketMap.put(last, location);\r\n                                nodeMap.put(location, last);\r\n                        } else {\r\n                                ArrayList<BracketNode> aNodeList = new ArrayList<>();\r\n                                for (int i = 0; i < num; i++) {\r\n                                        Point2D tl = new Point2D(iX, y);\r\n                                        Point2D tr = new Point2D(iX + iXO, y);\r\n                                        Point2D bl = new Point2D(iX, y + iYO);\r\n                                        Point2D br = new Point2D(iX + iXO, y + iYO);\r\n                                        BracketNode nTop = new BracketNode(\"\", iX, y - 20, iXO, 20);\r\n                                        aNodeList.add(nTop);\r\n                                        nodes.add(nTop);\r\n                                        BracketNode nBottom = new BracketNode(\"\", iX, y + (iYO - 20), iXO, 20);\r\n                                        aNodeList.add(nBottom);\r\n                                        nodes.add(nBottom);\r\n                                        Line top = new Line(tl.getX(), tl.getY(), tr.getX(), tr.getY());\r\n                                        Line bottom = new Line(bl.getX(), bl.getY(), br.getX(), br.getY());\r\n                                        Line right = new Line(tr.getX(), tr.getY(), br.getX(), br.getY());\r\n                                        getChildren().addAll(top, bottom, right, nTop, nBottom);\r\n                                        isTop = !isTop;\r\n                                        y += increment;\r\n                                }\r\n                                ArrayList<Integer> tmpHelp = helper(location, num);\r\n                                for (int j = 0; j < aNodeList.size(); j++) {\r\n                                        //System.out.println(currentBracket.getBracket().get(tmpHelp.get(j)));\r\n                                        aNodeList.get(j).setName(currentBracket.getBracket().get(tmpHelp.get(j)));\r\n                                        bracketMap.put(aNodeList.get(j), tmpHelp.get(j));\r\n                                        nodeMap.put(tmpHelp.get(j), aNodeList.get(j));\r\n                                        //System.out.println(bracketMap.get(aNodeList.get(j)));\r\n                                }\r\n                        }\r\n\r\n                }\r\n        }\r\n\r\n        /**\r\n         * The BracketNode model for the Graphical display of the \"Bracket\"\r\n         */\r\n        private class BracketNode extends Pane {\r\n                private String teamName;\r\n                private Rectangle rect;\r\n                private Label name;\r\n\r\n                /**\r\n                 * Creates a BracketNode with,\r\n                 *\r\n                 * @param teamName The name if any\r\n                 * @param x        The starting x location\r\n                 * @param y        The starting y location\r\n                 * @param rX       The width of the rectangle to fill pane\r\n                 * @param rY       The height of the rectangle\r\n                 */\r\n                public BracketNode(String teamName, int x, int y, int rX, int rY) {\r\n                        this.setLayoutX(x);\r\n                        this.setLayoutY(y);\r\n                        this.setMaxSize(rX, rY);\r\n                        this.teamName = teamName;\r\n                        rect = new Rectangle(rX, rY);\r\n                        rect.setFill(Color.TRANSPARENT);\r\n                        name = new Label(teamName);\r\n                        // setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\r\n                        name.setTranslateX(5);\r\n                        getChildren().addAll(name, rect);\r\n                }\r\n\r\n                /**\r\n                 * @return teamName The teams name.\r\n                 */\r\n                public String getName() {\r\n                        return teamName;\r\n                }\r\n\r\n                /**\r\n                 * @param teamName The name to assign to the node.\r\n                 */\r\n                public void setName(String teamName) {\r\n                        this.teamName = teamName;\r\n                        name.setText(teamName);\r\n                }\r\n                \r\n        }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MarchMadness/src/main/java/k/marchmadness/BracketPane.java b/MarchMadness/src/main/java/k/marchmadness/BracketPane.java
--- a/MarchMadness/src/main/java/k/marchmadness/BracketPane.java	(revision 5000917c3ac3df563b2600215809840bfea8b991)
+++ b/MarchMadness/src/main/java/k/marchmadness/BracketPane.java	(date 1649189214748)
@@ -1,3 +1,5 @@
+package k.marchmadness;
+
 import javafx.event.EventHandler;
 import javafx.geometry.NodeOrientation;
 import javafx.geometry.Point2D;
Index: MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package marchmadness;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Objects;\r\nimport javafx.application.Application;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Alert.AlertType;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.ToolBar;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.Priority;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\n/**\r\n *  MarchMadnessGUI\r\n * \r\n * this class contains the buttons the user interacts\r\n * with and controls the actions of other objects \r\n *\r\n * @author Grant Osborn\r\n */\r\npublic class MarchMadnessGUI extends Application {\r\n    \r\n    \r\n    //all the gui ellements\r\n    private BorderPane root;\r\n    private ToolBar toolBar;\r\n    private ToolBar btoolBar;\r\n    private Button simulate;\r\n    private Button login;\r\n    private Button scoreBoardButton;\r\n    private Button viewBracketButton;\r\n    private Button clearButton;\r\n    private Button resetButton;\r\n    private Button finalizeButton;\r\n    \r\n    //allows you to navigate back to division selection screen\r\n    private Button back;\r\n  \r\n    \r\n    private  Bracket startingBracket;\r\n    //reference to currently logged in bracket\r\n    private Bracket selectedBracket;\r\n    private Bracket simResultBracket;\r\n\r\n    \r\n    private ArrayList<Bracket> playerBrackets;\r\n    private HashMap<String, Bracket> playerMap;\r\n\r\n    \r\n\r\n    private ScoreBoardTable scoreBoard;\r\n    private TableView table;\r\n    private BracketPane bracketPane;\r\n    private GridPane loginP;\r\n    private TournamentInfo teamInfo;\r\n    \r\n    \r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        //try to load all the files, if there is an error display it\r\n        try{\r\n            teamInfo=new TournamentInfo();\r\n            startingBracket= new Bracket(teamInfo.loadStartingBracket());\r\n            simResultBracket=new Bracket(teamInfo.loadStartingBracket());\r\n        } catch (IOException ex) {\r\n            showError(new Exception(\"Can't find \"+ex.getMessage(),ex),true);\r\n        }\r\n        //deserialize stored brackets\r\n        playerBrackets = loadBrackets();\r\n        \r\n        playerMap = new HashMap<>();\r\n        addAllToMap();\r\n        \r\n\r\n\r\n        //the main layout container\r\n        root = new BorderPane();\r\n        scoreBoard= new ScoreBoardTable();\r\n        table=scoreBoard.start();\r\n        loginP=createLogin();\r\n        CreateToolBars();\r\n        \r\n        //display login screen\r\n        login();\r\n        \r\n        setActions();\r\n        root.setTop(toolBar);   \r\n        root.setBottom(btoolBar);\r\n        Scene scene = new Scene(root);\r\n        primaryStage.setMaximized(true);\r\n\r\n        primaryStage.setTitle(\"March Madness Bracket Simulator\");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * simulates the tournament  \r\n     * simulation happens only once and\r\n     * after the simulation no more users can login\r\n     */\r\n    private void simulate(){\r\n        //cant login and restart prog after simulate\r\n        login.setDisable(true);\r\n        simulate.setDisable(true);\r\n        \r\n       scoreBoardButton.setDisable(false);\r\n       viewBracketButton.setDisable(false);\r\n       \r\n       teamInfo.simulate(simResultBracket);\r\n       for(Bracket b:playerBrackets){\r\n           scoreBoard.addPlayer(b,b.scoreBracket(simResultBracket));\r\n\r\n           //Alland Timas --> returns score associated to user upon pressing submit button\r\n           if(b.getBracket() == selectedBracket.getBracket()){\r\n            infoAlert(\"Your score is: \" + scoreBoard.getPlayerScore(selectedBracket));\r\n           }\r\n       }\r\n        \r\n        displayPane(table);\r\n    }\r\n    \r\n    /**\r\n     * Displays the login screen\r\n     * \r\n     */\r\n    private void login(){            \r\n        login.setDisable(true);\r\n        simulate.setDisable(true);\r\n        scoreBoardButton.setDisable(true);\r\n        viewBracketButton.setDisable(true);\r\n        btoolBar.setDisable(true);\r\n        displayPane(loginP);\r\n    }\r\n    \r\n     /**\r\n     * Displays the score board\r\n     * \r\n     */\r\n    private void scoreBoard(){\r\n        displayPane(table);\r\n    }\r\n    \r\n     /**\r\n      * Displays Simulated Bracket\r\n      * \r\n      */\r\n    private void viewBracket(){\r\n       selectedBracket=simResultBracket;\r\n       bracketPane=new BracketPane(selectedBracket);\r\n       GridPane full = bracketPane.getFullPane();\r\n       full.setAlignment(Pos.CENTER);\r\n       full.setDisable(true);\r\n       displayPane(new ScrollPane(full)); \r\n    }\r\n    \r\n    /**\r\n     * allows user to choose bracket\r\n     * \r\n     */\r\n   private void chooseBracket(){\r\n        //login.setDisable(true);\r\n        btoolBar.setDisable(false);\r\n        bracketPane=new BracketPane(selectedBracket);\r\n        displayPane(bracketPane);\r\n\r\n    }\r\n    /**\r\n     * resets current selected sub tree\r\n     * for final4 reset Ro2 and winner\r\n     */\r\n    private void clear(){\r\n      \r\n      \r\n      bracketPane.clear();\r\n      bracketPane=new BracketPane(selectedBracket);\r\n      displayPane(bracketPane);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * resets entire bracket\r\n     */\r\n    private void reset(){\r\n        if(confirmReset()){\r\n            //horrible hack to reset\r\n            selectedBracket=new Bracket(startingBracket);\r\n            bracketPane=new BracketPane(selectedBracket);\r\n            displayPane(bracketPane);\r\n        }\r\n    }\r\n    \r\n    private void finalizeBracket(){\r\n       if(bracketPane.isComplete()){\r\n           btoolBar.setDisable(true);\r\n           bracketPane.setDisable(true);\r\n           simulate.setDisable(false);\r\n           login.setDisable(false);\r\n           //save the bracket along with account info\r\n           seralizeBracket(selectedBracket);\r\n            \r\n       }else{\r\n            infoAlert(\"You can only finalize a bracket once it has been completed.\");\r\n            //go back to bracket section selection screen\r\n            // bracketPane=new BracketPane(selectedBracket);   \r\n\r\n            displayPane(bracketPane);\r\n            //Alland timas --> added call to bracketPane's check empty nodes method\r\n            bracketPane.checkEmptyNodes();\r\n       }\r\n       //bracketPane=new BracketPane(selectedBracket);\r\n      \r\n      \r\n        \r\n    }\r\n    \r\n    \r\n    /**\r\n     * displays element in the center of the screen\r\n     * \r\n     * @param p must use a subclass of Pane for layout. \r\n     * to be properly center aligned in  the parent node\r\n     */\r\n    private void displayPane(Node p){\r\n        root.setCenter(p);\r\n        BorderPane.setAlignment(p,Pos.CENTER);\r\n    }\r\n    \r\n    /**\r\n     * Creates toolBar and buttons.\r\n     * adds buttons to the toolbar and saves global references to them\r\n     */\r\n    private void CreateToolBars(){\r\n        toolBar  = new ToolBar();\r\n        btoolBar  = new ToolBar();\r\n        login=new Button(\"Login\");\r\n        simulate=new Button(\"Simulate\");\r\n        scoreBoardButton=new Button(\"ScoreBoard\");\r\n        viewBracketButton= new Button(\"View Simulated Bracket\");\r\n        clearButton=new Button(\"Clear\");\r\n        resetButton=new Button(\"Reset\");\r\n        finalizeButton=new Button(\"Finalize\");\r\n        toolBar.getItems().addAll(\r\n                createSpacer(),\r\n                login,\r\n                simulate,\r\n                scoreBoardButton,\r\n                viewBracketButton,\r\n                createSpacer()\r\n        );\r\n        btoolBar.getItems().addAll(\r\n                createSpacer(),\r\n                clearButton,\r\n                resetButton,\r\n                finalizeButton,\r\n                back=new Button(\"Choose Division\"),\r\n                createSpacer()\r\n        );\r\n    }\r\n    \r\n   /**\r\n    * sets the actions for each button\r\n    */\r\n    private void setActions(){\r\n        login.setOnAction(e->login());\r\n        simulate.setOnAction(e->simulate());\r\n        scoreBoardButton.setOnAction(e->scoreBoard());\r\n        viewBracketButton.setOnAction(e->viewBracket());\r\n        clearButton.setOnAction(e->clear());\r\n        resetButton.setOnAction(e->reset());\r\n        finalizeButton.setOnAction(e->finalizeBracket());\r\n        back.setOnAction(e->{\r\n            bracketPane=new BracketPane(selectedBracket);\r\n            displayPane(bracketPane);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Creates a spacer for centering buttons in a ToolBar\r\n     */\r\n    private Pane createSpacer(){\r\n        Pane spacer = new Pane();\r\n        HBox.setHgrow(\r\n                spacer,\r\n                Priority.SOMETIMES\r\n        );\r\n        return spacer;\r\n    }\r\n    \r\n    \r\n    private GridPane createLogin(){\r\n        \r\n        \r\n        /*\r\n        LoginPane\r\n        Sergio and Joao\r\n         */\r\n\r\n        GridPane loginPane = new GridPane();\r\n        loginPane.setAlignment(Pos.CENTER);\r\n        loginPane.setHgap(10);\r\n        loginPane.setVgap(10);\r\n        loginPane.setPadding(new Insets(5, 5, 5, 5));\r\n\r\n        Text welcomeMessage = new Text(\"March Madness Login Welcome\");\r\n        loginPane.add(welcomeMessage, 0, 0, 2, 1);\r\n\r\n        Label userName = new Label(\"User Name: \");\r\n        loginPane.add(userName, 0, 1);\r\n\r\n        TextField enterUser = new TextField();\r\n        loginPane.add(enterUser, 1, 1);\r\n\r\n        Label password = new Label(\"Password: \");\r\n        loginPane.add(password, 0, 2);\r\n\r\n        PasswordField passwordField = new PasswordField();\r\n        loginPane.add(passwordField, 1, 2);\r\n\r\n        Button signButton = new Button(\"Sign in\");\r\n        loginPane.add(signButton, 1, 4);\r\n        signButton.setDefaultButton(true);//added by matt 5/7, lets you use sign in button by pressing enter\r\n\r\n        Label message = new Label();\r\n        loginPane.add(message, 1, 5);\r\n\r\n        signButton.setOnAction(event -> {\r\n\r\n            // the name user enter\r\n            String name = enterUser.getText();\r\n            // the password user enter\r\n            String playerPass = passwordField.getText();\r\n\r\n        \r\n          \r\n            \r\n            if (playerMap.get(name) != null) {\r\n                //check password of user\r\n                 \r\n                Bracket tmpBracket = this.playerMap.get(name);\r\n               \r\n                String password1 = tmpBracket.getPassword();\r\n\r\n                if (Objects.equals(password1, playerPass)) {\r\n                    // load bracket\r\n                    selectedBracket=playerMap.get(name);\r\n                    chooseBracket();\r\n                }else{\r\n                   infoAlert(\"The password you have entered is incorrect!\");\r\n                }\r\n\r\n            } else {\r\n                //check for empty fields\r\n                if(!name.equals(\"\")&&!playerPass.equals(\"\")){\r\n                    //create new bracket\r\n                    Bracket tmpPlayerBracket = new Bracket(startingBracket, name);\r\n                    playerBrackets.add(tmpPlayerBracket);\r\n                    tmpPlayerBracket.setPassword(playerPass);\r\n\r\n                    playerMap.put(name, tmpPlayerBracket);\r\n                    selectedBracket = tmpPlayerBracket;\r\n                    //alert user that an account has been created\r\n                    infoAlert(\"No user with the Username \\\"\"  + name + \"\\\" exists. A new account has been created.\");\r\n                    chooseBracket();\r\n                }\r\n            }\r\n        });\r\n        \r\n        return loginPane;\r\n    }\r\n    \r\n    /**\r\n     * addAllToMap\r\n     * adds all the brackets to the map for login\r\n     */\r\n    private void addAllToMap(){\r\n        for(Bracket b:playerBrackets){\r\n            playerMap.put(b.getPlayerName(), b);   \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * The Exception handler\r\n     * Displays a error message to the user\r\n     * and if the error is bad enough closes the program\r\n     * @param fatal true if the program should exit. false otherwise\r\n     */\r\n    private void showError(Exception e,boolean fatal){\r\n        String msg=e.getMessage();\r\n        if(fatal){\r\n            msg=msg+\" \\n\\nthe program will now close\";\r\n            //e.printStackTrace();\r\n        }\r\n        Alert alert = new Alert(AlertType.ERROR,msg);\r\n        alert.setResizable(true);\r\n        alert.getDialogPane().setMinWidth(420);   \r\n        alert.setTitle(\"Error\");\r\n        alert.setHeaderText(\"something went wrong\");\r\n        alert.showAndWait();\r\n        if(fatal){ \r\n            System.exit(666);\r\n        }   \r\n    }\r\n    \r\n    /**\r\n     * alerts user to the result of their actions in the login pane \r\n     * @param msg the message to be displayed to the user\r\n     */\r\n    private void infoAlert(String msg){\r\n        Alert alert = new Alert(AlertType.INFORMATION);\r\n        alert.setTitle(\"March Madness Bracket Simulator\");\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(msg);\r\n        alert.showAndWait();\r\n    }\r\n    \r\n    /**\r\n     * Prompts the user to confirm that they want\r\n     * to clear all predictions from their bracket\r\n     * @return true if the yes button clicked, false otherwise\r\n     */\r\n    private boolean confirmReset(){\r\n        Alert alert = new Alert(AlertType.CONFIRMATION, \r\n                \"Are you sure you want to reset the ENTIRE bracket?\", \r\n                ButtonType.YES,  ButtonType.CANCEL);\r\n        alert.setTitle(\"March Madness Bracket Simulator\");\r\n        alert.setHeaderText(null);\r\n        alert.showAndWait();\r\n        return alert.getResult()==ButtonType.YES;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Tayon Watson 5/5\r\n     * seralizedBracket\r\n     * @param B The bracket the is going to be seralized\r\n     */\r\n    private void seralizeBracket(Bracket B){\r\n        FileOutputStream outStream = null;\r\n        ObjectOutputStream out = null;\r\n    try \r\n    {\r\n      outStream = new FileOutputStream(B.getPlayerName()+\".ser\");\r\n      out = new ObjectOutputStream(outStream);\r\n      out.writeObject(B);\r\n      out.close();\r\n    } \r\n    catch(IOException e)\r\n    {\r\n      // Grant osborn 5/6 hopefully this never happens \r\n      showError(new Exception(\"Error saving bracket \\n\"+e.getMessage(),e),false);\r\n    }\r\n    }\r\n    /**\r\n     * Tayon Watson 5/5\r\n     * deseralizedBracket\r\n     * @param filename of the seralized bracket file\r\n     * @return deserialized bracket \r\n     */\r\n    private Bracket deseralizeBracket(String filename){\r\n        Bracket bracket = null;\r\n        FileInputStream inStream = null;\r\n        ObjectInputStream in = null;\r\n    try \r\n    {\r\n        inStream = new FileInputStream(filename);\r\n        in = new ObjectInputStream(inStream);\r\n        bracket = (Bracket) in.readObject();\r\n        in.close();\r\n    }catch (IOException | ClassNotFoundException e) {\r\n      // Grant osborn 5/6 hopefully this never happens either\r\n      showError(new Exception(\"Error loading bracket \\n\"+e.getMessage(),e),false);\r\n    } \r\n    return bracket;\r\n    }\r\n    \r\n      /**\r\n     * Tayon Watson 5/5\r\n     * deseralizedBracket\r\n     * @return deserialized bracket\r\n     */\r\n    private ArrayList<Bracket> loadBrackets()\r\n    {   \r\n        ArrayList<Bracket> list=new ArrayList<Bracket>();\r\n        File dir = new File(\".\");\r\n        for (final File fileEntry : dir.listFiles()){\r\n            String fileName = fileEntry.getName();\r\n            String extension = fileName.substring(fileName.lastIndexOf(\".\")+1);\r\n       \r\n            if (extension.equals(\"ser\")){\r\n                list.add(deseralizeBracket(fileName));\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n       \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java b/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java
--- a/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java	(revision 5000917c3ac3df563b2600215809840bfea8b991)
+++ b/MarchMadness/src/main/java/k/marchmadness/MarchMadnessGUI.java	(date 1649189214757)
@@ -1,4 +1,4 @@
-//package marchmadness;
+package k.marchmadness;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -144,7 +144,7 @@
 
            //Alland Timas --> returns score associated to user upon pressing submit button
            if(b.getBracket() == selectedBracket.getBracket()){
-            infoAlert("Your score is: " + scoreBoard.getPlayerScore(selectedBracket));
+            infoAlert("Your score is: " + scoreBoard.etPlayerScore(selectedBracket));
            }
        }
         
